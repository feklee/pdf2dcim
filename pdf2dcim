#!/bin/bash

# Felix E. Klee <felix.klee@inka.de>

shopt -s extglob
shopt -s nullglob

WIDTH=6000
HEIGHT=4000
START_NUMBER=1
ANGLE=0
ORIENTATION=1 # 1 = 0째, 3 = 180째, 6 = 90째, 8 = -90째
RESOLUTION=300

function verify_presence {
    hash "$1" 2>/dev/null || {
        echo "$1 is required but cannot be found" >&2
        exit 1
    }
}

verify_presence convert
verify_presence exiftool

# Usage info
function show_help {
cat << EOF
Usage: ${0##*/} [OPTION]... PDF-FILE
Convert PDF file to: 100__PDF/P0000000.JPG, 100__PDF/P0000001.JPG, ...

    -h          display this help and exit
    -W WIDTH    width in mm, default $WIDTH
    -H HEIGHT   height in mm, default $HEIGHT
    -P          portrait, default landscape
    -S NUMBER   number of first image, default $START_NUMBER
    -R DPI      resolution when rendering the PDF, default $RESOLUTION

The images are viewable in camera.

If 100__PDF already exists, then the number in front is incremented
until a directory is found that does not yet exist.

Note that each file number and each directory number should only
appear once, or your camera may not show images.  Examples:

  * File naming conflict: 100__PDF/P0000187.JPG, 105RICOH/M0000187.JPG

  * Directory naming conflict: 123__PDF, 123RICOH
EOF
}

OPTIND=1
while getopts hnW:H:PS:R: opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        W)  WIDTH=$OPTARG
            ;;
        H)  HEIGHT=$OPTARG
            ;;
        P)  ANGLE=90
            ORIENTATION=8
            ;;
        S)  START_NUMBER=$OPTARG
            ;;
        R)  RESOLUTION=$OPTARG
            ;;
        *)
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Discard the options and sentinel --

if [ "$#" -ne 1 ]; then
    show_help >&2
    exit 1
fi

function dcf_dir_name {
    printf "%03d__PDF" $1
}

i=100 # minimum number allowed by DCF Version 2.0
DIR=$(dcf_dir_name $i)
until mkdir $DIR 2>/dev/null; do
    ((i++))
    DIR=$(dcf_dir_name $i)
    [ $i -gt 999 ] && { # out of range
        echo "Cannot create directory"
        exit 1
    }
done

trap "rmdir --ignore-fail-on-non-empty $DIR" EXIT # in case of error

PDF="$1"
SIZE="${WIDTH}x$HEIGHT"
SCRIPT_DIR="$(dirname "$BASH_SOURCE")"
TEMPLATE="$SCRIPT_DIR/pdf2dcim.jpg" # taken with a camera, to copy EXIF
DENSITY="${RESOLUTION}x$RESOLUTION"

# Rasterize:
convert -sampling-factor 4:2:2 \
        -density "$DENSITY" \
        -rotate "$ANGLE" \
        -resize "$SIZE" \
        "$PDF" \
        -background white \
        -alpha remove \
        -colorspace sRGB \
        -type truecolor \
        -scene "$START_NUMBER" \
        $DIR/P%07d.JPG

# Make compatible with camera:
THUMBD="$(mktemp -d)"
for JPG in $DIR/P+([0-9]).JPG; do
    THUMB="$THUMBD/$(basename $JPG)"

    # Thumbnails >64 kiB will lead to EXIF issues.
    convert "$JPG" \
            -strip \
            -quality 85 \
            -resize 160x120 \
            -background black \
            -gravity center \
            -colorspace sRGB \
            -type truecolor \
            -extent 160x120 \
            -sampling-factor 4:2:2 \
            "$THUMB"

    exiftool -q -overwrite_original -TagsFromFile "$TEMPLATE" \
             -all:all -unsafe -XML:All -JFIF:ALL= "$JPG"
    exiftool -q -overwrite_original "-ThumbnailImage<=$THUMB" "$JPG"
    exiftool -q -overwrite_original -Orientation=$ORIENTATION \
             -n "$JPG"
done

echo "Created JPEG images in $DIR"
